0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.6.1
3 info using node@v0.10.4
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/crcn/Developer/public/caplet.js',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/crcn/.npm/caplet/0.0.18/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/crcn/.npm/caplet/0.0.18/package.tgz',
9 verbose tar pack   '/Users/crcn/Developer/public/caplet.js' ]
10 verbose tarball /Users/crcn/.npm/caplet/0.0.18/package.tgz
11 verbose folder /Users/crcn/Developer/public/caplet.js
12 info prepublish caplet@0.0.18
13 verbose addLocalTarball adding from inside cache /Users/crcn/.npm/caplet/0.0.18/package.tgz
14 silly cache afterAdd caplet@0.0.18
15 verbose afterAdd /Users/crcn/.npm/caplet/0.0.18/package/package.json not in flight; writing
16 verbose afterAdd /Users/crcn/.npm/caplet/0.0.18/package/package.json written
17 silly publish { name: 'caplet',
17 silly publish   version: '0.0.18',
17 silly publish   description: 'Models library for JavaScript',
17 silly publish   main: './lib/index.js',
17 silly publish   keywords: [ 'react', 'models', 'flux', 'mvc', 'data' ],
17 silly publish   scripts: { test: 'gulp test' },
17 silly publish   repository: { type: 'git', url: 'https://github.com/mojo-js/caplet.js.git' },
17 silly publish   author: '',
17 silly publish   license: 'ISC',
17 silly publish   bugs: { url: 'https://github.com/mojo-js/caplet.js/issues' },
17 silly publish   homepage: 'https://github.com/mojo-js/caplet.js',
17 silly publish   devDependencies:
17 silly publish    { 'browser-sync': '^2.3.1',
17 silly publish      browserify: '^9.0.3',
17 silly publish      'browserify-middleware': '^5.0.2',
17 silly publish      coveralls: '^2.11.2',
17 silly publish      'expect.js': '^0.3.1',
17 silly publish      express: '^4.12.3',
17 silly publish      gulp: '^3.8.11',
17 silly publish      'gulp-istanbul': '^0.6.0',
17 silly publish      'gulp-jshint': '^1.9.4',
17 silly publish      'gulp-mocha': '^2.0.0',
17 silly publish      'gulp-plumber': '^1.0.0',
17 silly publish      'gulp-react': '^3.0.1',
17 silly publish      'gulp-uglify': '^1.1.0',
17 silly publish      istanbul: '^0.3.6',
17 silly publish      jscs: '^1.11.3',
17 silly publish      jsdom: '^4.0.4',
17 silly publish      jshint: '^2.6.0',
17 silly publish      karma: '^0.12.31',
17 silly publish      mocha: '^2.1.0',
17 silly publish      protoclass: '0.0.6',
17 silly publish      react: '^0.13.1',
17 silly publish      reactify: '^1.1.0',
17 silly publish      uglify: '^0.1.1',
17 silly publish      'vinyl-buffer': '^1.0.0',
17 silly publish      'vinyl-source-stream': '^1.1.0',
17 silly publish      yargs: '^3.5.4' },
17 silly publish   dependencies:
17 silly publish    { 'fast-event-emitter': '0.0.2',
17 silly publish      'watchable-collection': '^0.0.x',
17 silly publish      'watchable-object': '^0.0.x',
17 silly publish      xtend: '^4.0.0' },
17 silly publish   readme: '## Caplet.js\n\nCaplet is a tiny (11kb) modeling library.\n\n[![Build Status](https://travis-ci.org/mojo-js/caplet.js.svg)](https://travis-ci.org/mojo-js/caplet.js) [![Dependency Status](https://david-dm.org/mojo-js/caplet.js.svg)](https://david-dm.org/mojo-js/caplet.js) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mojo-js/caplet.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nCaplet is the M in "MVC". It works independently from any other library, and can easily be used with your existing framework/view layer such as [AngularJS](https://angularjs.org/), [ReactJS](http://facebook.github.io/react/), [RactiveJS](http://www.ractivejs.org/), or [PaperclipJS](http://paperclipjs.com) (shameless plug).\n\n<!--\nCaplet doesn\'t really implement new concepts. In fact, it\'s been inspired by a flury of other well-established frameworks such as [MongooseJS](http://mongoosejs.com/), and [EmberJS](http://mongoosejs.com/).\n-->\n\n<!-- stuff on familiarity here -->\n\nCaplet doesn\'t make any assumptions about your code. It just gives organization to your model relationships in a sane way. It also gives you a relatively higher level of encapsulation for your data, while also encouraging you, but not forcefuly, to follow design patterns that scale quite well.\n\nCaplet has been an evolution of many libraries in the past, which have been used in a few pretty large applications (30k-ish loc). The first version came about sometime around 2013 as [mojo-models](https://github.com/mojo-js/mojo-models), and has since been further generalized for all intensive purposes.\n \nThe newer, hip version of Caplet has been designed for React, and pairs wells with the Hierarchial nature of React-based applications.\n\nCaplet can be a great companion to Flux. It also serves as a Flux replacement if you enjoy the good \'ol (and well proven when done right) MVC approach (Caplet (M) + React (VC)).\n\n\n#### Why?\n\n- Scales. Concepts have been used in various apps consisting of ~30k LOC.\n- Simple. You just have models & collections. Nothing else to learn.\n- Familiar. Caplet isn\'t too inventive. If you\'re familiar with Symphony, Mongoose, or Ember, then Caplet shouldn\'t be tough to learn.\n- Obvious. It\'s easier to reconsile how your application should be structured if the only thing you have to deal with are `models` & `collections`. \n- Encapsulated. Caplet was design to encourage you to focus how your models & collections relate to one other versus how they relate to other parts of your application - this includes views, and even the API. This allows you to:\n - Re-use your models for other applications - web/desktop/server-side.\n - Maintain your model structure even if the API changes.\n - Write your front-end in parallel with your API.\n- Extensible. Caplet was designed to allow you to add additional functionality as needed. Stuff like offline-mode & realtime data should be a breeze.\n- Testable. \n\n<!--\nno singletons\n-->\n\n\n#### Installation\n\n```\nnpm install caplet\n```\n\n#### Examples\n\n- [React TODOMVC](https://github.com/crcn/react-caplet-todomvc)\n\n#### Basic Example\n\n```javascript\nvar Caplet = require("../../lib");\nvar React  = require("react");\n\n/**\n */\n\nvar TodoModel = Caplet.createModelClass({\n});\n\n/**\n */\n\nvar TodoCollection = Caplet.createCollectionClass({\n    modelClass: TodoModel\n});\n\n/**\n */\n\nvar TodoComponent = React.createClass({\n    mixins: [Caplet.watchModelsMixin],\n    render: function() {\n        return <li><a href="#" onClick={this.props.todo.dispose.bind(this.props.todo)}>x</a> {this.props.todo.text}</li>\n    }\n}); \n\n/**\n */\n\nvar TodosComponent = React.createClass({\n    mixins: [Caplet.watchModelsMixin],\n    handleKeyDown: function(event) {\n        if (event.keyCode !== 13) return;\n        this.props.todos.create({ text: this.refs.todoText.getDOMNode().value });\n    },\n    render: function() {\n        return <div>\n            <input type="text" ref="todoText" onKeyDown={this.handleKeyDown} />\n            <ul>{ this.props.todos.map(function(todo) {\n                return <TodoComponent todo={todo} />;\n            })}</ul>\n        </div>\n    }\n}); \n\n/**\n */\n\nReact.render(<TodosComponent todos={ TodoCollection({\n    data: [{ text: "drive car" }, { text: "wash car" }]\n})} />, document.body);\n```\n\n### API\n\n#### Model Caplet.createModelClass(properties)\n\ncreates a new model class\n\n#### Model()\n\ncreates a new model\n\n```javascript\nvar model = new Model(); // this is valid\nvar model = Model();     // you can also omit the "new" keyword\n```\n\n#### Model.initialize()\n\ncalled when the model is instantiated\n\n```javascript\nvar Model = Caplet.createModelClass({\n    initialize: function() {\n        // initialize stuff here\n    }\n});\n\nModel(); // initialize() called\n```\n\n#### Model.fromData(data)\n\ncalled when the data property is set. This method deserializes data and sets the returned\nobject as properties on the model.\n\n> Note that `uid` should be set for an existing model\n\n```javascript\n\nvar Address = Caplet.createModelClass({\n    // impl here   \n});\n\nvar Person = Caplet.createModelClass({\n   fromData: function(data) {\n        return {\n            uid       : data._id,\n            firstName : data.firstName,\n            lastName  : data.lastName,\n            address   : Address({ data: data.address })\n        };\n   }\n});\n\nvar person = Person({\n    data: {\n        _id       : "dbId",\n        firstName : "Jeff",\n        lastName  : "Gordon",\n        address   : {\n            city  : "San Francisco",\n            state : "CA",\n            zip   : 94114\n        }\n    }\n});\n\nconsole.log(person.firstName); // Jeff\nconsole.log(person.lastName);  // Gordon\nconsole.log(person.address);   // [object Address]\nconsole.log(person.data);      // data prop\n```\n\n#### Model.toData()\n\nSerializes the model back into data.\n\n```javascript\nvar Person = Caplet.createModelClass({\n   toData: function(data) {\n        return {\n            _id       : this.uid,\n            firstName : this.firstName,\n            lastName  : this.lastName,\n            address   : this.address ? this.address.toData() : void 0\n        };\n   }\n});\n````\n\n#### Model.toJSON()\n\ncalls `toData()`\n\n#### Model.get(property)\n\nreturns a property\n\n#### Model.set(property, value)\n\nsets a property value\n\n#### Model.data\n\nunserialized data on the model\n\n#### Model.setProperties(properties)\n\nsets multiple property values\n\n#### disposable Model.watch(listener)\n\nwatches the model for any changes\n\n```javascript\nvar m = new Caplet.Model({ name: "Oprah" });\nm.watch(function() {\n    console.log("changed!");\n});\nm.set("name", "Ryan"); // triggers watcher\n```\n\n#### Model.dispose()\n\ndisposes the model - also removes it from a collection if it\'s in one\n\n#### Collection Caplet.createCollectionClass(properties)\n\ncreates a new collection class\n\n#### Collection()\n\ncreates a new collection\n\n```javascript\nvar collection = new Collection(); \nvar collection = Collection();    \n```\n\n#### Collection.initialize()\n\ncalled when the collection is created\n\n#### Collection.fromData(data)\n\ndeserializes properties on the collection. This is already set, but you can easily override it.\n\n```javascript\nvar People = Caplet.createCollectionClass({\n    fromData: function(data) {\n        return {\n            anotherProp: "blah",\n            source: data.source.map(function(data) {\n                return this.createModel({ data: data });\n            }.bind(this))\n        };\n    }\n});\n```\n\n#### Collection.modelClass\n\nThe model class to instantiate for each data item\n\n```javascript\nvar Person = Caplet.createModelClass();\nvar People = Caplet.createCollectionClass({\n    modelClass: Person\n});\n\nvar people = People({ data: [{ name: "Ben"}, { name: "Carmen" }]});\nconsole.log(people.at(0)); // [object Person]\n```\n\n#### Collection.source\n\nthe source of the collection\n\n#### Collection.create(properties)\n\ncreates a new model & adds to the collection\n\n```javascript\nvar Person = Caplet.createModelClass();\nvar People = Caplet.createCollectionClass({\n    modelClass: Person\n});\n\nvar people = People();\nvar person = people.create({ name: "Gordon" });\n\nconsole.log(people.length); // 1\n```\n\n#### Collection.didChange()\n\noverride this if you want to listen for any changes on the collection \n\n```javascript\nvar Todo = Caplet.createModelClass({\n    toggleComplete: function() {\n        this.set("complete", !this.complete);\n    }\n});\n\nvar Todos = Caplet.createCollectionClass({\n    modelClass: Todo,\n    getInitialProperties: function() {\n        return {\n            allComplete: this._isAllComplete();\n        }\n    },\n    didChange: function() {\n        this.setProperties(this.getInitialProperties());\n    },\n    _isAllComplete: function() {\n        for (var i = this.length; i--;) if (!this.at(i).complete) return false;\n        return true;\n    }\n});\n\nvar todos = Todos({\n    data: [ \n        { text: "wash car" },\n        { text: "buy groceries", "complete": true }\n    ]\n});\n\nconsole.log(todos.allComplete); // false\ntodos.at(0).set("complete", true);\nconsole.log(todos.allComplete); // true\n```\n\n\n\n#### Collection.at(index)\n\nreturns a model at the given index\n\n#### Collection.filter(fn)\n\nfilters the collection\n\n#### Collection.push(model)\n\npushes a model onto the collection\n\n#### Collection.unshift(model)\n\nunshifts a mdoel\n\n#### Collection.splice(index, numToRemove[, ...replace])\n\nRemoves / replaces items in the collection\n\n#### Collection.map(fn)\n\nmaps & returns values\n\n#### Collection.source\n\nsource of the collection (array of models)\n\n#### Collection.data\n\nraw unserialized data\n\n### Helpers\n\n#### Caplet.setVirtuals(target, virtuals)\n\nSets virtual properties which get called on demand\n\n```javascript\n\nvar People = Caplet.createCollectionClass({\n    load: function() {\n        Caplet.load(this, function(next) {\n            $.get(this.person ? "/people/" + this.person.uid + "/friends" : "/people", next);\n        })\n    }\n});\n\n\nvar Person = Caplet.createModelClass({\n    initialize: function() {\n        Caplet.setVirtuals(this, {\n            friends: function(onLoad) {\n                People({ person: this }).load(onLoad);\n            }\n        })\n    }\n});\n\nvar person = Person({ uid: "personId" });\nperson.watch(function() {\n    console.log(person.get("people")); // should be defined\n});\nperson.get("people"); // trigger virtual property\n\n```\n\n#### Caplet.watchProperty(target, property, listener)\n\nwatches a property on the model or collection\n\n#### Caplet.load(target, load, onLoad)\n\n```javascript\nvar Person = Caplet.createModelClass({\n    load: function(onLoad) {\n        Caplet.load(this, function(onLoad) {\n            $.get("/people/" + this.uid, onLoad);\n        }, onLoad);\n    }\n})\n```\n\n#### Caplet.watchModelsMixin\n\nReact mixin which automatically watches properties on a component & triggers a re-render\nif anything changes\n\n\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: 'b5903a7b77a22770d5871e645bc1165dfb5a66b3',
17 silly publish   _id: 'caplet@0.0.18',
17 silly publish   _shasum: '8e984d4e74a6b52224710a7a68e925f72167f65c',
17 silly publish   _from: '.' }
18 silly mapToRegistry name caplet
19 silly mapToRegistry using default registry
20 silly mapToRegistry registry https://registry.npmjs.org/
21 silly mapToRegistry uri https://registry.npmjs.org/caplet
22 verbose publish registryBase https://registry.npmjs.org/
23 silly publish uploading /Users/crcn/.npm/caplet/0.0.18/package.tgz
24 verbose request uri https://registry.npmjs.org/caplet
25 verbose request sending authorization for write operation
26 info attempt registry request try #1 at 16:18:11
27 verbose request id 40667995432b5c94
28 http request PUT https://registry.npmjs.org/caplet
29 http 409 https://registry.npmjs.org/caplet
30 verbose headers { date: 'Mon, 23 Mar 2015 23:18:06 GMT',
30 verbose headers   server: 'Apache',
30 verbose headers   'content-type': 'application/json',
30 verbose headers   'cache-control': 'max-age=60',
30 verbose headers   'content-length': '17',
30 verbose headers   'accept-ranges': 'bytes',
30 verbose headers   via: '1.1 varnish',
30 verbose headers   'x-served-by': 'cache-sjc3134-SJC',
30 verbose headers   'x-cache': 'MISS',
30 verbose headers   'x-cache-hits': '0',
30 verbose headers   'x-timer': 'S1427152686.267786,VS0,VE177',
30 verbose headers   'keep-alive': 'timeout=10, max=50',
30 verbose headers   connection: 'Keep-Alive' }
31 verbose request invalidating /Users/crcn/.npm/registry.npmjs.org/caplet on PUT
32 verbose request uri https://registry.npmjs.org/caplet?write=true
33 verbose request no auth needed
34 info attempt registry request try #1 at 16:18:11
35 http request GET https://registry.npmjs.org/caplet?write=true
36 http 200 https://registry.npmjs.org/caplet?write=true
37 verbose stack Error: cannot modify pre-existing version
37 verbose stack     at conflictError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/publish.js:184:11)
37 verbose stack     at CachingRegistryClient.putNext (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/publish.js:147:15)
37 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/publish.js:129:15
37 verbose stack     at /usr/local/lib/node_modules/npm/lib/cache/caching-client.js:52:8
37 verbose stack     at f (/usr/local/lib/node_modules/npm/node_modules/once/once.js:17:25)
37 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:73:16
37 verbose stack     at f (/usr/local/lib/node_modules/npm/node_modules/once/once.js:17:25)
37 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:262:12)
37 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:178:14)
37 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:344:22)
38 verbose pkgid caplet
39 verbose cwd /Users/crcn/Developer/public/caplet.js
40 error Darwin 14.1.0
41 error argv "node" "/usr/local/bin/npm" "publish"
42 error node v0.10.4
43 error npm  v2.6.1
44 error code EPUBLISHCONFLICT
45 error publish fail Cannot publish over existing version.
45 error publish fail Update the 'version' field in package.json and try again.
45 error publish fail
45 error publish fail To automatically increment version numbers, see:
45 error publish fail     npm help version
46 verbose exit [ 1, true ]
